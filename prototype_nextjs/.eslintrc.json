{
  "root": true,
  "extends": [
    "eslint:recommended",
    "next/core-web-vitals",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended"
  ],
  "rules": {
    // From tRPC examples
    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",

    // ...
    "quotes": ["warn", "single"],
    "semi": "error",
    "comma-dangle": ["error", {
      "arrays": "always-multiline",
      "objects": "always-multiline",
      "imports": "always-multiline",
      "exports": "always-multiline",
      "functions": "only-multiline"
    }],
    // "prefer-const": "warn", // annoying having it as error
    "no-unused-vars": ["warn", { "args": "none" }],
    "no-empty-pattern": "warn", // annoying having it as error cos there's pages to be done

    // taking from airbnb (mostly modifying severity tho)
    "quote-props": ["error", "as-needed"],
    "no-new-object": "error",
    "object-shorthand": "error",
    "array-callback-return": "warn",
    "prefer-template": "error",
    "template-curly-spacing": "error",
    "space-before-function-paren": ["error", {
      "anonymous": "always",
      "named": "never",
      "asyncArrow": "always"
    }],
    "space-before-blocks": ["error", "always"],
    "prefer-spread": "error",
    "prefer-arrow-callback": ["error", {
      "allowNamedFunctions": true
    }],
    "arrow-spacing": "error",
    "arrow-parens": "warn",
    "no-confusing-arrow": "error",
    "implicit-arrow-linebreak": "error",
    "no-duplicate-imports": "error",
    "import/first": "error",
    "dot-notation": "error",
    "no-multi-assign": "error",
    "operator-linebreak": ["warn", "before"],
    "no-nested-ternary": "error",
    "no-unneeded-ternary": "error",
    "no-mixed-operators": "error",
    "nonblock-statement-body-position": ["error", "beside"],
    "comma-style": "error",
    "no-new-wrappers": "error",
    "radix": ["error", "as-needed"],

    "react/self-closing-comp": "warn"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "env": { "browser": true, "es6": true, "node": true },
      "extends": [
        "eslint:recommended",
        "next/core-web-vitals",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended"
      ],
      // "globals": { "Atomics": "readonly", "SharedArrayBuffer": "readonly" },
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "tsconfig.json",
        "ecmaVersion": 2018, // Allows for the parsing of modern ECMAScript features
        "sourceType": "module" // Allows for the use of imports
      },
      "plugins": ["@typescript-eslint"],
      "rules": {
        // From tRPC examples
        // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "react/react-in-jsx-scope": "off",
        "react/prop-types": "off",
        "@typescript-eslint/no-explicit-any": "off",

        // ...
        "semi": "off",
        "no-empty-pattern": "warn", // annoying having it as error cos there's pages to be done
        "@typescript-eslint/semi": "error",
        "@typescript-eslint/consistent-type-imports": "error",

        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-unsafe-argument": "off", // makes working with fetch so annoying
        "@typescript-eslint/no-unsafe-assignment": "off", // makes working with fetch so annoying
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unused-vars": ["warn", { "args": "none" }]
      }
    }
  ]
}
