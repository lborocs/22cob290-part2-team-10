// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// sqlite doesn't support enums :/
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users shouldn't be deleted and their ID shouldn't change so referencial
// actions aren't needed but including them in case

// Project IDs shouldn't change so `onDelete` actions aren't needed but
// including them in case

model User {
  id             String  @id @default(uuid())
  email          String  @unique // because emails are case insensitive, we need to store them in lowercase
  hashedPassword String
  name           String
  isAdmin        Boolean @default(false)
  leftCompany    Boolean @default(false)
  inviteToken    String?
  isManager      Boolean @default(false)
  avatarBg       String  @default("#e2ba39")
  avatarFg       String  @default("#ffffff")
  image          String? @db.Text

  todoList UserTask[] @relation("UserTasks")

  // projects
  ledProjects      Project[]     @relation("ProjectLeader")
  assignedProjects Project[]     @relation("ProjectMembers")
  // tasks from ALL projects
  tasks            ProjectTask[] @relation("ProjectTaskAssignee")
  permittedTasks   ProjectTask[] @relation("ProjectTaskPermitted")

  // forum
  posts              Post[]        @relation("Post")
  editedPostsHistory PostHistory[] @relation("PostEditor")
  upvotedPosts       Post[]        @relation("PostUpvotes")
}

// ------------------------------------------

model UserTask {
  id          Int           @id @default(autoincrement())
  userId      String
  user        User          @relation("UserTasks", fields: [userId], references: [id], onUpdate: Cascade)
  deadline    DateTime
  stage       String
  title       String
  description String
  tags        UserTaskTag[]
}

model UserTaskTag {
  name  String     @id
  tasks UserTask[]
}

// ------------------------------------------

model Project {
  id       Int           @id @default(autoincrement())
  name     String
  leaderId String
  leader   User          @relation("ProjectLeader", fields: [leaderId], references: [id], onUpdate: Cascade)
  members  User[]        @relation("ProjectMembers")
  tasks    ProjectTask[] @relation("ProjectTasks")
}

model ProjectTask {
  id          Int              @id @default(autoincrement())
  projectId   Int
  project     Project          @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stage       String
  title       String
  description String
  deadline    DateTime
  tags        ProjectTaskTag[]
  assigneeId  String
  assignee    User             @relation("ProjectTaskAssignee", fields: [assigneeId], references: [id], onUpdate: Cascade)
  permitted   User[]           @relation("ProjectTaskPermitted")
}

model ProjectTaskTag {
  name  String        @id
  tasks ProjectTask[]
}

// ------------------------------------------

// current post state is Post.history[ORDER BY dateEdited DESC][0]
// original state is Post.history[ORDER BY dateEdited ASC][0]
model Post {
  id       Int           @id @default(autoincrement())
  authorId String
  author   User          @relation("Post", fields: [authorId], references: [id], onUpdate: Cascade)
  topics   PostTopic[]
  upvoters User[]        @relation("PostUpvotes")
  // datePosted DateTime  - not sure if to have here
  history  PostHistory[] @relation("PostHistory")
}

// many-to-many relationship table representing User (editor) <-> Post
model PostHistory {
  id       Int      @id @default(autoincrement())
  postId   Int
  post     Post     @relation("PostHistory", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editorId String
  editor   User     @relation("PostEditor", fields: [editorId], references: [id], onUpdate: Cascade)
  date     DateTime @default(now())
  title    String
  summary  String
  content  String   @db.Text
}

model PostTopic {
  name  String @id
  posts Post[]
}
