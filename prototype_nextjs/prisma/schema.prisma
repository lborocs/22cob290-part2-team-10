// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// sqlite doesn't support enums :/
datasource db {
  // provider = "mysql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

// role?
model User {
  id             String  @id @default(uuid())
  email          String  @unique
  hashedPassword String
  name           String
  leftCompany    Boolean @default(false)

  inviterId String?
  inviter   User?   @relation("Inviter", fields: [inviterId], references: [id])
  invited   User[]  @relation("Inviter")

  avatarBg String @default("#e2ba39")
  avatarFg String @default("white")

  managedProjects  Project[]        @relation("ProjectManager")
  ledProjects      Project[]        @relation("ProjectLeader")
  assignedProjects ProjectMembers[] @relation("ProjectMembers_member")
  // tasks from ALL projects
  tasks            ProjectTask[]    @relation("ProjectTaskAssignee")
}

// TODO: user's todo list

model Project {
  id   Int    @id @default(autoincrement())
  name String

  managerId String
  manager   User             @relation("ProjectManager", fields: [managerId], references: [id])
  leaderId  String
  leader    User             @relation("ProjectLeader", fields: [leaderId], references: [id])
  members   ProjectMembers[] @relation("ProjectMembers_project")

  // TODO: split tasks into TodoTask etc.?
  tasks ProjectTask[] @relation("ProjectTasks")
}

model ProjectMembers {
  projectId Int
  project   Project @relation("ProjectMembers_project", fields: [projectId], references: [id])
  memberId  String
  member    User    @relation("ProjectMembers_member", fields: [memberId], references: [id])

  @@id([projectId, memberId])
}

model ProjectTask {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation("ProjectTasks", fields: [projectId], references: [id])

  stage       String // enum
  title       String
  description String
  tags        ProjectTaskTag[]
  assigneeId  String
  assignee    User             @relation("ProjectTaskAssignee", fields: [assigneeId], references: [id])
}

model ProjectTaskTag {
  name  String        @id
  tasks ProjectTask[]
}
