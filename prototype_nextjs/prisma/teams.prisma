// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// sqlite doesn't support enums :/
datasource db {
  // provider = "mysql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Example model including teams where a team has:
//  - a manager
//  - a leader
//  - x members
//
// Projects are assigned to teams not users

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  hashedPassword String
  name           String
  leftCompany    Boolean @default(false)
  inviterId      String?
  inviter        User?   @relation("Invite", fields: [inviterId], references: [id])
  invited        User[]  @relation("Invite")
  avatarBg       String  @default("#e2ba39")
  avatarFg       String  @default("#ffffff")

  isManager       Boolean // company-wide manager
  managedTeams    Team[]    @relation("TeamManager")
  ledTeams        Team[]    @relation("TeamLeader")
  teams           Team[]    @relation("TeamMembers")
  managedProjects Project[] @relation("ProjectManager")

  // tasks from ALL projects
  tasks          ProjectTask[] @relation("ProjectTaskAssignee")
  permittedTasks ProjectTask[] @relation("ProjectTaskPermitted")

  // forum
  posts        Post[] @relation("Post")
  upvotedPosts Post[] @relation("PostUpvotes")
}

// ------------------------------------------

// TODO: user's todo list

// ------------------------------------------

model Team {
  name      String    @id
  managerId String
  manager   User      @relation("TeamManager", fields: [managerId], references: [id])
  leaderId  String
  leader    User      @relation("TeamLeader", fields: [leaderId], references: [id])
  members   User[]    @relation("TeamMembers")
  projects  Project[]
}

// ------------------------------------------

model Project {
  id        Int           @id @default(autoincrement())
  name      String
  managerId String
  manager   User          @relation("ProjectManager", fields: [userId], references: [id])
  teams     Team[]
  tasks     ProjectTask[] @relation("ProjectTasks")
  userId    String
}

model ProjectTask {
  id          Int              @id @default(autoincrement())
  projectId   Int
  project     Project          @relation("ProjectTasks", fields: [projectId], references: [id])
  stage       String // enum
  title       String
  description String
  tags        ProjectTaskTag[]
  assigneeId  String
  assignee    User             @relation("ProjectTaskAssignee", fields: [assigneeId], references: [id])
  permitted   User[]           @relation("ProjectTaskPermitted")
}

model ProjectTaskTag {
  name  String        @id
  tasks ProjectTask[]
}

// ------------------------------------------

model Post {
  id         Int         @id @default(autoincrement())
  authorId   String
  author     User        @relation("Post", fields: [authorId], references: [id])
  datePosted DateTime    @default(now())
  title      String
  summary    String
  content    String
  topics     PostTopic[]
  upvotes    User[]      @relation("PostUpvotes")
}

model PostTopic {
  name  String @id
  posts Post[]
}
